// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/acid/acid.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Acid_CreateUser_FullMethodName = "/acid.Acid/createUser"
	Acid_FetchUser_FullMethodName  = "/acid.Acid/fetchUser"
)

// AcidClient is the client API for Acid service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AcidClient interface {
	CreateUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	FetchUser(ctx context.Context, in *FetchUserRequest, opts ...grpc.CallOption) (*FetchUserResponse, error)
}

type acidClient struct {
	cc grpc.ClientConnInterface
}

func NewAcidClient(cc grpc.ClientConnInterface) AcidClient {
	return &acidClient{cc}
}

func (c *acidClient) CreateUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, Acid_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acidClient) FetchUser(ctx context.Context, in *FetchUserRequest, opts ...grpc.CallOption) (*FetchUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchUserResponse)
	err := c.cc.Invoke(ctx, Acid_FetchUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AcidServer is the server API for Acid service.
// All implementations must embed UnimplementedAcidServer
// for forward compatibility.
type AcidServer interface {
	CreateUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	FetchUser(context.Context, *FetchUserRequest) (*FetchUserResponse, error)
	mustEmbedUnimplementedAcidServer()
}

// UnimplementedAcidServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAcidServer struct{}

func (UnimplementedAcidServer) CreateUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAcidServer) FetchUser(context.Context, *FetchUserRequest) (*FetchUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchUser not implemented")
}
func (UnimplementedAcidServer) mustEmbedUnimplementedAcidServer() {}
func (UnimplementedAcidServer) testEmbeddedByValue()              {}

// UnsafeAcidServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AcidServer will
// result in compilation errors.
type UnsafeAcidServer interface {
	mustEmbedUnimplementedAcidServer()
}

func RegisterAcidServer(s grpc.ServiceRegistrar, srv AcidServer) {
	// If the following call pancis, it indicates UnimplementedAcidServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Acid_ServiceDesc, srv)
}

func _Acid_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcidServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acid_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcidServer).CreateUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acid_FetchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcidServer).FetchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acid_FetchUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcidServer).FetchUser(ctx, req.(*FetchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Acid_ServiceDesc is the grpc.ServiceDesc for Acid service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Acid_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "acid.Acid",
	HandlerType: (*AcidServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createUser",
			Handler:    _Acid_CreateUser_Handler,
		},
		{
			MethodName: "fetchUser",
			Handler:    _Acid_FetchUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/acid/acid.proto",
}
